// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  emailVerified  DateTime?  
  name String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  notes Note[]
  tags Tag[]

  @@map("users")
}

model Note{
  id String @id @default(cuid())
  title String 
  content String @db.Text
  summary String? @db.Text
  source String @default("manual")
  isArchived  Boolean @default(false)
  isFavorite Boolean @default(false)
  lastAccessedAt DateTime?
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User  @relation(fields: [userId],references: [id],onDelete: Cascade)
  noteTags NoteTag[]

  @@index([userId,createdAt])
  @@index([userId,isArchived])
  @@index([userId,isFavorite])
  @@index([lastAccessedAt])

  @@map("notes")

}
model Tag {
  id String @id @default(cuid())
  name String
  color String @default("#ffed24ff")
  userId String

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  noteTags NoteTag[]

  @@unique([name,userId])
  @@index([userId])

  @@map("tags")

}

model NoteTag{
  noteId String
  tagId String

  note Note @relation(fields: [noteId],references: [id],onDelete: Cascade)
  tag Tag @relation(fields:[tagId],references: [id],onDelete: Cascade)

  @@id([noteId,tagId])
  @@map("note_tags")
}
model Account{
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider,providerAccountId])
  @@map("accounts")
}

model Session{
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken{
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier,token])
  @@map("verification_tokens")
}
